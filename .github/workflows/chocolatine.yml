name: chocolatine

on:
  push:
    branches-ignore:
    - "ga-ignore-*"
  pull_request:
    branches-ignore:
    - "ga-ignore-*"

env: 
  MIRROR_URL: "git@github.com:EpitechPromo2027/B-DOP-200-NAN-2-1-chocolatine-simon.ganier-lombard.git"
  EXECUTABLES: "test_print"

jobs:
  check_push_executable:
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    steps:
      - uses: actions/checkout@v3
      - id: make_program
        run: make
        timeout-minutes: 2
        continue-on-error: true
      - id: make_clean
        run: make clean
        continue-on-error: true
      - id: check_presence_of_pushed_executables
        run: |
          if [ -z "$EXECUTABLES" ]; then
            echo "No executable to check"
            exit 0
          fi
          for executable in $EXECUTABLES; do
            if [ ! -f $executable ]; then
              echo "NO executable are pushed! good !"
              exit 0
            fi
            else
              echo "executable are pushed! BAD!!!"
              exit 1
          done
        continue-on-error: false
  
  check_coding_style:
    runs-on: ubuntu-latest
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - uses: actions/checkout@v3
      - id: check_coding_style
        run: check.sh $(pwd) $(pwd)
        continue-on-error: true
        #redirect to a specific line in a file when a Github Actions is clicked
        # so we need to include the file name, the line number and the error message
        # as this example : echo "::error file=path/to/file.cpp,line=42::Error message"
        # if the file is empty (no coding style error) then we print a notice and continue the workflow
        # if the file is not empty (coding style error) then we print an error and stop the workflow
      - name: Anotation of the coding style
        run: |
          cat coding-style-reports.log | while read line; do
            echo "::error file=$(echo $line | cut -d ':' -f 1),\
            line=$(echo $line | cut -d ':' -f 2),\
            title=$(echo $line | cut -d ':' -f 3)"\
            coding style error::"$(echo $line | cut -d ':' -f 4)"
          done
          if [ -s coding-style-reports.log ]; then
            exit 1
          else
            echo "::notice::No coding style error found."
          fi
        continue-on-error: false

  check_program_compilation:
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    steps:
      - uses: actions/checkout@v3
      - id: make_program
        run: make
        timeout-minutes: 2
        continue-on-error: true
      - id: make_clean
        run: make clean
        continue-on-error: true
      - id: check_presence_of_executables
        run: |
          if [ -z "$EXECUTABLES" ]; then
            echo "No executable to check"
            exit 0
          fi
          for executable in $EXECUTABLES; do
            if [ ! -f $executable ]; then
              echo "Executable : $executable not found"
              exit 1
            fi
          done
        continue-on-error: false

  run_tests:
    runs-on: ubuntu-latest
    container: epitechcontent/epitest-docker
    steps:
      - uses: actions/checkout@v3
      - id: run_tests
        run: make tests_run
        timeout-minutes: 2

  push_to_mirror:
    if: ${{ github.event_name == 'push' }}
    needs: [check_coding_style, check_program_compilation, check_push_executable]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
          target_repo_url: ${{ env.MIRROR_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
